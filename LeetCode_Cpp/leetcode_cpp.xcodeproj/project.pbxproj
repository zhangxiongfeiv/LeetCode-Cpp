// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 50;
	objects = {

/* Begin PBXBuildFile section */
		A503696D24B5DAC900FC1049 /* 面试题_02_08_环路检测.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A503696C24B5DAC900FC1049 /* 面试题_02_08_环路检测.cpp */; };
		A508620D24D3D779001C54AC /* 面试题08_03_魔术索引.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A508620B24D3D779001C54AC /* 面试题08_03_魔术索引.cpp */; };
		A50946A524CABC4C00B0EBB7 /* 437_路径总和III.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A50946A424CABC4C00B0EBB7 /* 437_路径总和III.cpp */; };
		A50946A724CAC1E200B0EBB7 /* 1290_二进制链表转整数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A50946A624CAC1E200B0EBB7 /* 1290_二进制链表转整数.cpp */; };
		A50FAE5A24B564F800561A45 /* 面试题_16_11_跳水板.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A50FAE5824B564F800561A45 /* 面试题_16_11_跳水板.cpp */; };
		A50FAE5C24B5857E00561A45 /* 删除排序数组中的重复项.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A50FAE5B24B5857E00561A45 /* 删除排序数组中的重复项.cpp */; };
		A510DCB424D8FC5900CE32BA /* 23_合并K个排序链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A510DCB324D8FC5900CE32BA /* 23_合并K个排序链表.cpp */; };
		A518199824C0226B00433CA9 /* 33_搜索旋转排序数组.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A518199724C0226B00433CA9 /* 33_搜索旋转排序数组.cpp */; };
		A518199A24C030D200433CA9 /* 83_删除排序链表中的重复元素.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A518199924C030D200433CA9 /* 83_删除排序链表中的重复元素.cpp */; };
		A518199C24C0321D00433CA9 /* 82_删除排序链表中的重复元素II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A518199B24C0321D00433CA9 /* 82_删除排序链表中的重复元素II.cpp */; };
		A519E7EF24C53918008CEE67 /* 167_两数之和_II _输入有序数组.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A519E7EE24C53918008CEE67 /* 167_两数之和_II _输入有序数组.cpp */; };
		A522F83E24CE786400247299 /* 392_判断子序列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A522F83C24CE786400247299 /* 392_判断子序列.cpp */; };
		A524EC6924B6B81A00765683 /* 面试题_02_04_分割链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A524EC6824B6B81A00765683 /* 面试题_02_04_分割链表.cpp */; };
		A524EC6B24B6BB7C00765683 /* _328_奇偶链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A524EC6A24B6BB7C00765683 /* _328_奇偶链表.cpp */; };
		A5286D3D24DBF13600211888 /* 61_旋转链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5286D3C24DBF13600211888 /* 61_旋转链表.cpp */; };
		A5286D4024DBF54F00211888 /* 86_分隔链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5286D3E24DBF54F00211888 /* 86_分隔链表.cpp */; };
		A5286D4224DBF7B700211888 /* 141_环形链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5286D4124DBF7B700211888 /* 141_环形链表.cpp */; };
		A5286D4424DBF8AC00211888 /* 142_环形链表II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5286D4324DBF8AC00211888 /* 142_环形链表II.cpp */; };
		A5286D4924DD36AD00211888 /* 3_无重复字符的最长子串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5286D4824DD36AD00211888 /* 3_无重复字符的最长子串.cpp */; };
		A52A157A24C6D9E900434F59 /* 1021_删除最外层的括号.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A52A157924C6D9E900434F59 /* 1021_删除最外层的括号.cpp */; };
		A52A157C24C6E0F900434F59 /* 921_使括号有效的最少添加.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A52A157B24C6E0F900434F59 /* 921_使括号有效的最少添加.cpp */; };
		A52A2F0C24E24CC200BC90A0 /* 130_被围绕的区域.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A52A2F0B24E24CC200BC90A0 /* 130_被围绕的区域.cpp */; };
		A52A2F0E24E264A500BC90A0 /* 215_数组中的第K个最大元素.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A52A2F0D24E264A500BC90A0 /* 215_数组中的第K个最大元素.cpp */; };
		A52A52CC24D7FE45000BEF47 /* 116_填充每个节点的下一个右侧节点指针.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A52A52CB24D7FE45000BEF47 /* 116_填充每个节点的下一个右侧节点指针.cpp */; };
		A52A52CE24D80333000BEF47 /* 117_填充每个节点的下一个右侧节点指针II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A52A52CD24D80333000BEF47 /* 117_填充每个节点的下一个右侧节点指针II.cpp */; };
		A52C714C24B4476500A0F3F3 /* 112_路径总和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A52C714924B4476500A0F3F3 /* 112_路径总和.cpp */; };
		A52C714D24B4476500A0F3F3 /* TreeNode.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A52C714A24B4476500A0F3F3 /* TreeNode.cpp */; };
		A52C715024B447B300A0F3F3 /* 面试题 10.01.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A52C714F24B447B300A0F3F3 /* 面试题 10.01.cpp */; };
		A539654724D299370047AC36 /* 98_验证二叉搜索树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A539654624D299370047AC36 /* 98_验证二叉搜索树.cpp */; };
		A539654924D29F460047AC36 /* 100_相同的树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A539654824D29F460047AC36 /* 100_相同的树.cpp */; };
		A539654B24D29FFC0047AC36 /* 101_对称二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A539654A24D29FFC0047AC36 /* 101_对称二叉树.cpp */; };
		A539654D24D2AAED0047AC36 /* 102_二叉树的层序遍历.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A539654C24D2AAED0047AC36 /* 102_二叉树的层序遍历.cpp */; };
		A539654F24D2AD6E0047AC36 /* 103_二叉树的锯齿形层次遍历.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A539654E24D2AD6E0047AC36 /* 103_二叉树的锯齿形层次遍历.cpp */; };
		A539655124D2AE6B0047AC36 /* 105_从前序与中序遍历序列构造二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A539655024D2AE6B0047AC36 /* 105_从前序与中序遍历序列构造二叉树.cpp */; };
		A539655324D2B41B0047AC36 /* 106_从中序与后序遍历序列构造二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A539655224D2B41B0047AC36 /* 106_从中序与后序遍历序列构造二叉树.cpp */; };
		A539655524D2BB4D0047AC36 /* 107_二叉树的层次遍历II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A539655424D2BB4D0047AC36 /* 107_二叉树的层次遍历II.cpp */; };
		A53CF93324E39975009B2E04 /* 133_克隆图.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A53CF93224E39975009B2E04 /* 133_克隆图.cpp */; };
		A53CF93524E3BC40009B2E04 /* 1379_找出克隆二叉树中的相同节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A53CF93424E3BC40009B2E04 /* 1379_找出克隆二叉树中的相同节点.cpp */; };
		A53CF93724E3C2CB009B2E04 /* 897_递增顺序查找树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A53CF93624E3C2CB009B2E04 /* 897_递增顺序查找树.cpp */; };
		A53F4A7824BEA9FF0053DB5A /* 96_不同的二叉搜索树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A53F4A7724BEA9FF0053DB5A /* 96_不同的二叉搜索树.cpp */; };
		A53F4A7A24BEC9E70053DB5A /* 79_单词搜索.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A53F4A7924BEC9E70053DB5A /* 79_单词搜索.cpp */; };
		A545FD3024C8547E009ADB2A /* 134_加油站.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A545FD2E24C8547E009ADB2A /* 134_加油站.cpp */; };
		A54980E524B469910066F455 /* 24_两两交换链表中的节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A54980E424B469910066F455 /* 24_两两交换链表中的节点.cpp */; };
		A54980E724B46D7D0066F455 /* 143_重排链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A54980E624B46D7D0066F455 /* 143_重排链表.cpp */; };
		A550F67E24B465D900556ABA /* 19_删除链表的倒数第N个节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A550F67D24B465D900556ABA /* 19_删除链表的倒数第N个节点.cpp */; };
		A557A07924BD522400E5F736 /* 120_三角形最小路径和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A557A07824BD522400E5F736 /* 120_三角形最小路径和.cpp */; };
		A557A07E24BD8B7D00E5F736 /* 872_叶子相似的树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A557A07C24BD8B7D00E5F736 /* 872_叶子相似的树.cpp */; };
		A557A08124BD906800E5F736 /* 513_找树左下角的值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A557A08024BD906800E5F736 /* 513_找树左下角的值.cpp */; };
		A557A08424BDB7EB00E5F736 /* 1123_最深叶节点的最近公共祖先.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A557A08224BDB7EB00E5F736 /* 1123_最深叶节点的最近公共祖先.cpp */; };
		A56118AB24DE8C18008A742A /* 169_多数元素.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A56118AA24DE8C18008A742A /* 169_多数元素.cpp */; };
		A56118B124E1440B008A742A /* 152_乘积最大子数组.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A56118B024E1440B008A742A /* 152_乘积最大子数组.cpp */; };
		A56118B324E14D85008A742A /* 283_移动零.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A56118B224E14D85008A742A /* 283_移动零.cpp */; };
		A562A66B24CFBFA8008CA743 /* 104_二叉树的最大深度.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A562A66924CFBFA8008CA743 /* 104_二叉树的最大深度.cpp */; };
		A562A66D24CFC623008CA743 /* 155_最小栈.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A562A66C24CFC623008CA743 /* 155_最小栈.cpp */; };
		A562A66F24CFC88A008CA743 /* 94_二叉树的中序遍历.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A562A66E24CFC88A008CA743 /* 94_二叉树的中序遍历.cpp */; };
		A562A67124CFCA99008CA743 /* 232_用栈实现队列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A562A67024CFCA99008CA743 /* 232_用栈实现队列.cpp */; };
		A562A67324CFCDE0008CA743 /* 225_用队列实现栈.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A562A67224CFCDE0008CA743 /* 225_用队列实现栈.cpp */; };
		A562A67524CFF6BB008CA743 /* 344_反转字符串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A562A67424CFF6BB008CA743 /* 344_反转字符串.cpp */; };
		A562A67824CFF975008CA743 /* 118_杨辉三角.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A562A67624CFF975008CA743 /* 118_杨辉三角.cpp */; };
		A562A67B24CFFB2A008CA743 /* 119_杨辉三角II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A562A67924CFFB2A008CA743 /* 119_杨辉三角II.cpp */; };
		A568F64724D14E8C00A0A547 /* 136_只出现一次的数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A568F64624D14E8C00A0A547 /* 136_只出现一次的数字.cpp */; };
		A568F64924D151D700A0A547 /* 240_搜索二维矩阵II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A568F64824D151D700A0A547 /* 240_搜索二维矩阵II.cpp */; };
		A568F64B24D152D700A0A547 /* 88_合并两个有序数组.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A568F64A24D152D700A0A547 /* 88_合并两个有序数组.cpp */; };
		A568F64D24D1570A00A0A547 /* 125_验证回文串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A568F64C24D1570A00A0A547 /* 125_验证回文串.cpp */; };
		A56A353324C585CF00CD7014 /* 1047_删除字符串中的所有相邻重复项.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A56A353224C585CF00CD7014 /* 1047_删除字符串中的所有相邻重复项.cpp */; };
		A56A353624C58E9B00CD7014 /* 1019_链表中的下一个更大节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A56A353424C58E9B00CD7014 /* 1019_链表中的下一个更大节点.cpp */; };
		A5732B3E24C8078F00D91A04 /* 173_二叉搜索树迭代器.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5732B3D24C8078F00D91A04 /* 173_二叉搜索树迭代器.cpp */; };
		A5732B4024C80CAA00D91A04 /* 901_股票价格跨度.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5732B3F24C80CAA00D91A04 /* 901_股票价格跨度.cpp */; };
		A57C654C24E52A520070D250 /* 43_字符串相乘.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A57C654B24E52A520070D250 /* 43_字符串相乘.cpp */; };
		A590DAEE24C1585C00D8D39F /* 35_搜索插入位置.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A590DAED24C1585C00D8D39F /* 35_搜索插入位置.cpp */; };
		A593AD0124CEF74B005BAA65 /* 20_有效的括号.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A593AD0024CEF74B005BAA65 /* 20_有效的括号.cpp */; };
		A593AD0324CEFA01005BAA65 /* 739_每日温度.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A593AD0224CEFA01005BAA65 /* 739_每日温度.cpp */; };
		A593AD0524CEFDDF005BAA65 /* 150_逆波兰表达式求值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A593AD0424CEFDDF005BAA65 /* 150_逆波兰表达式求值.cpp */; };
		A5A260B124D416F0003C6BC8 /* 108_将有序数组转换为二叉搜索树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5A260B024D416F0003C6BC8 /* 108_将有序数组转换为二叉搜索树.cpp */; };
		A5A260B324D41A19003C6BC8 /* 110_平衡二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5A260B224D41A19003C6BC8 /* 110_平衡二叉树.cpp */; };
		A5A260B524D41BA6003C6BC8 /* 111_二叉树的最小深度.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5A260B424D41BA6003C6BC8 /* 111_二叉树的最小深度.cpp */; };
		A5A3B18224B2D4010025BA95 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5A3B18124B2D4010025BA95 /* main.cpp */; };
		A5A3B18E24B2D4160025BA95 /* ListNode.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5A3B18924B2D4160025BA95 /* ListNode.cpp */; };
		A5A3B18F24B2D4160025BA95 /* 206_反转链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5A3B18A24B2D4160025BA95 /* 206_反转链表.cpp */; };
		A5A3B19024B2D4160025BA95 /* 2_两数相加.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5A3B18B24B2D4160025BA95 /* 2_两数相加.cpp */; };
		A5A3B19124B2D4160025BA95 /* 21_合并两个有序链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5A3B18C24B2D4160025BA95 /* 21_合并两个有序链表.cpp */; };
		A5A5D25B24DA9F67008B1FCE /* 337_打家劫舍III.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5A5D25A24DA9F67008B1FCE /* 337_打家劫舍III.cpp */; };
		A5A9D30C24BEE01700033039 /* 剑指Offer61_扑克牌中的顺子.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5A9D30A24BEE01700033039 /* 剑指Offer61_扑克牌中的顺子.cpp */; };
		A5A9D30E24BF106400033039 /* 剑指Offer33_二叉搜索树的后序遍历序列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5A9D30D24BF106400033039 /* 剑指Offer33_二叉搜索树的后序遍历序列.cpp */; };
		A5BEA4C024BC21A400563FF9 /* 350_两个数组的交集II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5BEA4BF24BC21A400563FF9 /* 350_两个数组的交集II.cpp */; };
		A5BEA4C224BC21BB00563FF9 /* 349_两个数组的交集.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5BEA4C124BC21BB00563FF9 /* 349_两个数组的交集.cpp */; };
		A5D035DF24D558E200734DEB /* 113_路径总和II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5D035DE24D558E200734DEB /* 113_路径总和II.cpp */; };
		A5D035E124D7AB5500734DEB /* 415_字符串相加.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5D035E024D7AB5500734DEB /* 415_字符串相加.cpp */; };
		A5D2B5C824CBED13006694E0 /* 38_外观数列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5D2B5C724CBED13006694E0 /* 38_外观数列.cpp */; };
		A5D2B5CB24CC130C006694E0 /* 687_最长同值路径.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5D2B5C924CC130C006694E0 /* 687_最长同值路径.cpp */; };
		A5D2B5CD24CC13F1006694E0 /* 371_两整数之和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5D2B5CC24CC13F1006694E0 /* 371_两整数之和.cpp */; };
		A5D3D8AF24B81A15003AF7C8 /* 121_买卖股票的最佳时机.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5D3D8AE24B81A15003AF7C8 /* 121_买卖股票的最佳时机.cpp */; };
		A5D3D8B224B82EDF003AF7C8 /* 122_买卖股票的最佳时机II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5D3D8B124B82EDF003AF7C8 /* 122_买卖股票的最佳时机II.cpp */; };
		A5E15D9B24D15CA40092EEFB /* 680_验证回文字符串Ⅱ.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5E15D9A24D15CA40092EEFB /* 680_验证回文字符串Ⅱ.cpp */; };
		A5E15D9D24D1616A0092EEFB /* 139_单词拆分.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5E15D9C24D1616A0092EEFB /* 139_单词拆分.cpp */; };
		A5E3679724C9289D001AD032 /* 64_最小路径和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5E3679624C9289D001AD032 /* 64_最小路径和.cpp */; };
		A5F0510824CA806E009E0391 /* 1025_除数博弈.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5F0510724CA806E009E0391 /* 1025_除数博弈.cpp */; };
		A5F0651624BC63AE007F0C5C /* 剑指Offer13_机器人的运动范围.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5F0651524BC63AE007F0C5C /* 剑指Offer13_机器人的运动范围.cpp */; };
		A5F57D8124C98E690020C6BC /* 538_把二叉搜索树转换为累加树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5F57D8024C98E690020C6BC /* 538_把二叉搜索树转换为累加树.cpp */; };
		A5F57D8324C99DFC0020C6BC /* 1305_两棵二叉搜索树中的所有元素.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5F57D8224C99DFC0020C6BC /* 1305_两棵二叉搜索树中的所有元素.cpp */; };
		A5F9454B24B85A8000573A2F /* 309_最佳买卖股票时机含冷冻期.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5F9454A24B85A8000573A2F /* 309_最佳买卖股票时机含冷冻期.cpp */; };
		A5F9454D24B866CD00573A2F /* 旋转数组.cpp in Sources */ = {isa = PBXBuildFile; fileRef = A5F9454C24B866CD00573A2F /* 旋转数组.cpp */; };
		B70F3EC324C48B7800046C9D /* 337_打家劫舍III.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B70F3EC224C48B7800046C9D /* 337_打家劫舍III.cpp */; };
		B7181F4524BC917900C809F3 /* 剑指_Offer_15_二进制中1的个数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B7181F4424BC917900C809F3 /* 剑指_Offer_15_二进制中1的个数.cpp */; };
		B72175AC24B9D6C3001CDC1A /* 存在重复元素.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B72175AB24B9D6C3001CDC1A /* 存在重复元素.cpp */; };
		B72175AE24B9D864001CDC1A /* 只出现一次的数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B72175AD24B9D864001CDC1A /* 只出现一次的数字.cpp */; };
		B724C91D24C5DFC9002CBE12 /* 268_缺失数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B724C91C24C5DFC9002CBE12 /* 268_缺失数字.cpp */; };
		B754C8D224BF59B400A6F30B /* 剑指 Offer59II队列的最大值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B754C8D124BF59B400A6F30B /* 剑指 Offer59II队列的最大值.cpp */; };
		B7551BB324C1ECBA00410B03 /* 1302_层数最深叶子节点的和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B7551BB224C1ECBA00410B03 /* 1302_层数最深叶子节点的和.cpp */; };
		B7551BB524C1FAA700410B03 /* 1464_数组中两元素的最大乘积.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B7551BB424C1FAA700410B03 /* 1464_数组中两元素的最大乘积.cpp */; };
		B7551BB824C1FD4A00410B03 /* 1502_判断能否形成等差数列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B7551BB624C1FD4A00410B03 /* 1502_判断能否形成等差数列.cpp */; };
		B758C2BA24BF6A4B0008A4C4 /* 剑指 Offer59I_滑动窗口的最大值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B758C2B924BF6A4B0008A4C4 /* 剑指 Offer59I_滑动窗口的最大值.cpp */; };
		B769302C24D6FC9900D1F965 /* 114_二叉树展开为链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B769302B24D6FC9900D1F965 /* 114_二叉树展开为链表.cpp */; };
		B798D14124BAFD960044C1CA /* 174_地下城游戏.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B798D14024BAFD960044C1CA /* 174_地下城游戏.cpp */; };
		B798D14324BB09530044C1CA /* 5460_好数对的数目.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B798D14224BB09530044C1CA /* 5460_好数对的数目.cpp */; };
		B798D14524BB11D20044C1CA /* 1470_重新排列数组.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B798D14424BB11D20044C1CA /* 1470_重新排列数组.cpp */; };
		B79DC35124C334C9008589E6 /* 429_N叉树的层序遍历.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B79DC35024C334C9008589E6 /* 429_N叉树的层序遍历.cpp */; };
		B79DC35424C334E9008589E6 /* Node.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B79DC35224C334E9008589E6 /* Node.cpp */; };
		B79DC35624C33853008589E6 /* 199_二叉树的右视图.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B79DC35524C33853008589E6 /* 199_二叉树的右视图.cpp */; };
		B79DC35824C33C90008589E6 /* 129_求根到叶子节点数字之和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B79DC35724C33C90008589E6 /* 129_求根到叶子节点数字之和.cpp */; };
		B7B5338124B60471000FFA74 /* 面试题_02_07_链表相交.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B7B5338024B60471000FFA74 /* 面试题_02_07_链表相交.cpp */; };
		B7B5338424B60D3F000FFA74 /* 1_两数之和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B7B5338324B60D3F000FFA74 /* 1_两数之和.cpp */; };
		B7D01F7E24B759A3006BCD88 /* 55_跳跃游戏.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B7D01F7D24B759A3006BCD88 /* 55_跳跃游戏.cpp */; };
		B7D01F8024B7661B006BCD88 /* 1480_一维数组的动态和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = B7D01F7F24B7661B006BCD88 /* 1480_一维数组的动态和.cpp */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		A5A3B17C24B2D4010025BA95 /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = /usr/share/man/man1/;
			dstSubfolderSpec = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 1;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		A503696C24B5DAC900FC1049 /* 面试题_02_08_环路检测.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "面试题_02_08_环路检测.cpp"; sourceTree = "<group>"; };
		A508620B24D3D779001C54AC /* 面试题08_03_魔术索引.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "面试题08_03_魔术索引.cpp"; sourceTree = "<group>"; };
		A50946A424CABC4C00B0EBB7 /* 437_路径总和III.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "437_路径总和III.cpp"; sourceTree = "<group>"; };
		A50946A624CAC1E200B0EBB7 /* 1290_二进制链表转整数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1290_二进制链表转整数.cpp"; sourceTree = "<group>"; };
		A50FAE5824B564F800561A45 /* 面试题_16_11_跳水板.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "面试题_16_11_跳水板.cpp"; sourceTree = "<group>"; };
		A50FAE5B24B5857E00561A45 /* 删除排序数组中的重复项.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "删除排序数组中的重复项.cpp"; sourceTree = "<group>"; };
		A510DCB324D8FC5900CE32BA /* 23_合并K个排序链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "23_合并K个排序链表.cpp"; sourceTree = "<group>"; };
		A518199724C0226B00433CA9 /* 33_搜索旋转排序数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "33_搜索旋转排序数组.cpp"; sourceTree = "<group>"; };
		A518199924C030D200433CA9 /* 83_删除排序链表中的重复元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "83_删除排序链表中的重复元素.cpp"; sourceTree = "<group>"; };
		A518199B24C0321D00433CA9 /* 82_删除排序链表中的重复元素II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "82_删除排序链表中的重复元素II.cpp"; sourceTree = "<group>"; };
		A519E7EE24C53918008CEE67 /* 167_两数之和_II _输入有序数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "167_两数之和_II _输入有序数组.cpp"; sourceTree = "<group>"; };
		A522F83C24CE786400247299 /* 392_判断子序列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "392_判断子序列.cpp"; sourceTree = "<group>"; };
		A524EC6824B6B81A00765683 /* 面试题_02_04_分割链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "面试题_02_04_分割链表.cpp"; sourceTree = "<group>"; };
		A524EC6A24B6BB7C00765683 /* _328_奇偶链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "_328_奇偶链表.cpp"; sourceTree = "<group>"; };
		A5286D3C24DBF13600211888 /* 61_旋转链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "61_旋转链表.cpp"; sourceTree = "<group>"; };
		A5286D3E24DBF54F00211888 /* 86_分隔链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "86_分隔链表.cpp"; sourceTree = "<group>"; };
		A5286D4124DBF7B700211888 /* 141_环形链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "141_环形链表.cpp"; sourceTree = "<group>"; };
		A5286D4324DBF8AC00211888 /* 142_环形链表II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "142_环形链表II.cpp"; sourceTree = "<group>"; };
		A5286D4824DD36AD00211888 /* 3_无重复字符的最长子串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "3_无重复字符的最长子串.cpp"; sourceTree = "<group>"; };
		A52A157924C6D9E900434F59 /* 1021_删除最外层的括号.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1021_删除最外层的括号.cpp"; sourceTree = "<group>"; };
		A52A157B24C6E0F900434F59 /* 921_使括号有效的最少添加.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "921_使括号有效的最少添加.cpp"; sourceTree = "<group>"; };
		A52A2F0B24E24CC200BC90A0 /* 130_被围绕的区域.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "130_被围绕的区域.cpp"; sourceTree = "<group>"; };
		A52A2F0D24E264A500BC90A0 /* 215_数组中的第K个最大元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "215_数组中的第K个最大元素.cpp"; sourceTree = "<group>"; };
		A52A52CB24D7FE45000BEF47 /* 116_填充每个节点的下一个右侧节点指针.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "116_填充每个节点的下一个右侧节点指针.cpp"; sourceTree = "<group>"; };
		A52A52CD24D80333000BEF47 /* 117_填充每个节点的下一个右侧节点指针II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "117_填充每个节点的下一个右侧节点指针II.cpp"; sourceTree = "<group>"; };
		A52C714924B4476500A0F3F3 /* 112_路径总和.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "112_路径总和.cpp"; sourceTree = "<group>"; };
		A52C714A24B4476500A0F3F3 /* TreeNode.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = TreeNode.cpp; sourceTree = "<group>"; };
		A52C714B24B4476500A0F3F3 /* TreeNode.hpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; path = TreeNode.hpp; sourceTree = "<group>"; };
		A52C714F24B447B300A0F3F3 /* 面试题 10.01.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "面试题 10.01.cpp"; sourceTree = "<group>"; };
		A539654624D299370047AC36 /* 98_验证二叉搜索树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "98_验证二叉搜索树.cpp"; sourceTree = "<group>"; };
		A539654824D29F460047AC36 /* 100_相同的树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "100_相同的树.cpp"; sourceTree = "<group>"; };
		A539654A24D29FFC0047AC36 /* 101_对称二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "101_对称二叉树.cpp"; sourceTree = "<group>"; };
		A539654C24D2AAED0047AC36 /* 102_二叉树的层序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "102_二叉树的层序遍历.cpp"; sourceTree = "<group>"; };
		A539654E24D2AD6E0047AC36 /* 103_二叉树的锯齿形层次遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "103_二叉树的锯齿形层次遍历.cpp"; sourceTree = "<group>"; };
		A539655024D2AE6B0047AC36 /* 105_从前序与中序遍历序列构造二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "105_从前序与中序遍历序列构造二叉树.cpp"; sourceTree = "<group>"; };
		A539655224D2B41B0047AC36 /* 106_从中序与后序遍历序列构造二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "106_从中序与后序遍历序列构造二叉树.cpp"; sourceTree = "<group>"; };
		A539655424D2BB4D0047AC36 /* 107_二叉树的层次遍历II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "107_二叉树的层次遍历II.cpp"; sourceTree = "<group>"; };
		A53CF93224E39975009B2E04 /* 133_克隆图.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "133_克隆图.cpp"; sourceTree = "<group>"; };
		A53CF93424E3BC40009B2E04 /* 1379_找出克隆二叉树中的相同节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1379_找出克隆二叉树中的相同节点.cpp"; sourceTree = "<group>"; };
		A53CF93624E3C2CB009B2E04 /* 897_递增顺序查找树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "897_递增顺序查找树.cpp"; sourceTree = "<group>"; };
		A53F4A7724BEA9FF0053DB5A /* 96_不同的二叉搜索树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "96_不同的二叉搜索树.cpp"; sourceTree = "<group>"; };
		A53F4A7924BEC9E70053DB5A /* 79_单词搜索.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "79_单词搜索.cpp"; sourceTree = "<group>"; };
		A545FD2E24C8547E009ADB2A /* 134_加油站.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "134_加油站.cpp"; sourceTree = "<group>"; };
		A54980E424B469910066F455 /* 24_两两交换链表中的节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "24_两两交换链表中的节点.cpp"; sourceTree = "<group>"; };
		A54980E624B46D7D0066F455 /* 143_重排链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "143_重排链表.cpp"; sourceTree = "<group>"; };
		A550F67D24B465D900556ABA /* 19_删除链表的倒数第N个节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "19_删除链表的倒数第N个节点.cpp"; sourceTree = "<group>"; };
		A557A07824BD522400E5F736 /* 120_三角形最小路径和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "120_三角形最小路径和.cpp"; sourceTree = "<group>"; };
		A557A07C24BD8B7D00E5F736 /* 872_叶子相似的树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "872_叶子相似的树.cpp"; sourceTree = "<group>"; };
		A557A08024BD906800E5F736 /* 513_找树左下角的值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "513_找树左下角的值.cpp"; sourceTree = "<group>"; };
		A557A08224BDB7EB00E5F736 /* 1123_最深叶节点的最近公共祖先.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1123_最深叶节点的最近公共祖先.cpp"; sourceTree = "<group>"; };
		A56118AA24DE8C18008A742A /* 169_多数元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "169_多数元素.cpp"; sourceTree = "<group>"; };
		A56118B024E1440B008A742A /* 152_乘积最大子数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "152_乘积最大子数组.cpp"; sourceTree = "<group>"; };
		A56118B224E14D85008A742A /* 283_移动零.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "283_移动零.cpp"; sourceTree = "<group>"; };
		A562A66924CFBFA8008CA743 /* 104_二叉树的最大深度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "104_二叉树的最大深度.cpp"; sourceTree = "<group>"; };
		A562A66C24CFC623008CA743 /* 155_最小栈.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "155_最小栈.cpp"; sourceTree = "<group>"; };
		A562A66E24CFC88A008CA743 /* 94_二叉树的中序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "94_二叉树的中序遍历.cpp"; sourceTree = "<group>"; };
		A562A67024CFCA99008CA743 /* 232_用栈实现队列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "232_用栈实现队列.cpp"; sourceTree = "<group>"; };
		A562A67224CFCDE0008CA743 /* 225_用队列实现栈.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "225_用队列实现栈.cpp"; sourceTree = "<group>"; };
		A562A67424CFF6BB008CA743 /* 344_反转字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "344_反转字符串.cpp"; sourceTree = "<group>"; };
		A562A67624CFF975008CA743 /* 118_杨辉三角.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "118_杨辉三角.cpp"; sourceTree = "<group>"; };
		A562A67924CFFB2A008CA743 /* 119_杨辉三角II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "119_杨辉三角II.cpp"; sourceTree = "<group>"; };
		A568F64624D14E8C00A0A547 /* 136_只出现一次的数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "136_只出现一次的数字.cpp"; sourceTree = "<group>"; };
		A568F64824D151D700A0A547 /* 240_搜索二维矩阵II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "240_搜索二维矩阵II.cpp"; sourceTree = "<group>"; };
		A568F64A24D152D700A0A547 /* 88_合并两个有序数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "88_合并两个有序数组.cpp"; sourceTree = "<group>"; };
		A568F64C24D1570A00A0A547 /* 125_验证回文串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "125_验证回文串.cpp"; sourceTree = "<group>"; };
		A56A353224C585CF00CD7014 /* 1047_删除字符串中的所有相邻重复项.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1047_删除字符串中的所有相邻重复项.cpp"; sourceTree = "<group>"; };
		A56A353424C58E9B00CD7014 /* 1019_链表中的下一个更大节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1019_链表中的下一个更大节点.cpp"; sourceTree = "<group>"; };
		A5732B3D24C8078F00D91A04 /* 173_二叉搜索树迭代器.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "173_二叉搜索树迭代器.cpp"; sourceTree = "<group>"; };
		A5732B3F24C80CAA00D91A04 /* 901_股票价格跨度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "901_股票价格跨度.cpp"; sourceTree = "<group>"; };
		A57C654B24E52A520070D250 /* 43_字符串相乘.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "43_字符串相乘.cpp"; sourceTree = "<group>"; };
		A590DAED24C1585C00D8D39F /* 35_搜索插入位置.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "35_搜索插入位置.cpp"; sourceTree = "<group>"; };
		A593AD0024CEF74B005BAA65 /* 20_有效的括号.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "20_有效的括号.cpp"; sourceTree = "<group>"; };
		A593AD0224CEFA01005BAA65 /* 739_每日温度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "739_每日温度.cpp"; sourceTree = "<group>"; };
		A593AD0424CEFDDF005BAA65 /* 150_逆波兰表达式求值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "150_逆波兰表达式求值.cpp"; sourceTree = "<group>"; };
		A5A260B024D416F0003C6BC8 /* 108_将有序数组转换为二叉搜索树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "108_将有序数组转换为二叉搜索树.cpp"; sourceTree = "<group>"; };
		A5A260B224D41A19003C6BC8 /* 110_平衡二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "110_平衡二叉树.cpp"; sourceTree = "<group>"; };
		A5A260B424D41BA6003C6BC8 /* 111_二叉树的最小深度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "111_二叉树的最小深度.cpp"; sourceTree = "<group>"; };
		A5A3B17E24B2D4010025BA95 /* leetcode_cpp */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = leetcode_cpp; sourceTree = BUILT_PRODUCTS_DIR; };
		A5A3B18124B2D4010025BA95 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
		A5A3B18924B2D4160025BA95 /* ListNode.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ListNode.cpp; sourceTree = "<group>"; };
		A5A3B18A24B2D4160025BA95 /* 206_反转链表.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "206_反转链表.cpp"; sourceTree = "<group>"; };
		A5A3B18B24B2D4160025BA95 /* 2_两数相加.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "2_两数相加.cpp"; sourceTree = "<group>"; };
		A5A3B18C24B2D4160025BA95 /* 21_合并两个有序链表.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "21_合并两个有序链表.cpp"; sourceTree = "<group>"; };
		A5A3B18D24B2D4160025BA95 /* ListNode.hpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; path = ListNode.hpp; sourceTree = "<group>"; };
		A5A5D25A24DA9F67008B1FCE /* 337_打家劫舍III.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "337_打家劫舍III.cpp"; sourceTree = "<group>"; };
		A5A9D30A24BEE01700033039 /* 剑指Offer61_扑克牌中的顺子.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指Offer61_扑克牌中的顺子.cpp"; sourceTree = "<group>"; };
		A5A9D30D24BF106400033039 /* 剑指Offer33_二叉搜索树的后序遍历序列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指Offer33_二叉搜索树的后序遍历序列.cpp"; sourceTree = "<group>"; };
		A5BEA4BF24BC21A400563FF9 /* 350_两个数组的交集II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "350_两个数组的交集II.cpp"; sourceTree = "<group>"; };
		A5BEA4C124BC21BB00563FF9 /* 349_两个数组的交集.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "349_两个数组的交集.cpp"; sourceTree = "<group>"; };
		A5D035DE24D558E200734DEB /* 113_路径总和II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "113_路径总和II.cpp"; sourceTree = "<group>"; };
		A5D035E024D7AB5500734DEB /* 415_字符串相加.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "415_字符串相加.cpp"; sourceTree = "<group>"; };
		A5D2B5C724CBED13006694E0 /* 38_外观数列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "38_外观数列.cpp"; sourceTree = "<group>"; };
		A5D2B5C924CC130C006694E0 /* 687_最长同值路径.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "687_最长同值路径.cpp"; sourceTree = "<group>"; };
		A5D2B5CA24CC130C006694E0 /* 687_最长同值路径.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "687_最长同值路径.hpp"; sourceTree = "<group>"; };
		A5D2B5CC24CC13F1006694E0 /* 371_两整数之和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "371_两整数之和.cpp"; sourceTree = "<group>"; };
		A5D3D8AE24B81A15003AF7C8 /* 121_买卖股票的最佳时机.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "121_买卖股票的最佳时机.cpp"; sourceTree = "<group>"; };
		A5D3D8B124B82EDF003AF7C8 /* 122_买卖股票的最佳时机II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "122_买卖股票的最佳时机II.cpp"; sourceTree = "<group>"; };
		A5E15D9A24D15CA40092EEFB /* 680_验证回文字符串Ⅱ.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "680_验证回文字符串Ⅱ.cpp"; sourceTree = "<group>"; };
		A5E15D9C24D1616A0092EEFB /* 139_单词拆分.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "139_单词拆分.cpp"; sourceTree = "<group>"; };
		A5E3679624C9289D001AD032 /* 64_最小路径和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "64_最小路径和.cpp"; sourceTree = "<group>"; };
		A5F0510724CA806E009E0391 /* 1025_除数博弈.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1025_除数博弈.cpp"; sourceTree = "<group>"; };
		A5F0651524BC63AE007F0C5C /* 剑指Offer13_机器人的运动范围.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指Offer13_机器人的运动范围.cpp"; sourceTree = "<group>"; };
		A5F57D8024C98E690020C6BC /* 538_把二叉搜索树转换为累加树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "538_把二叉搜索树转换为累加树.cpp"; sourceTree = "<group>"; };
		A5F57D8224C99DFC0020C6BC /* 1305_两棵二叉搜索树中的所有元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1305_两棵二叉搜索树中的所有元素.cpp"; sourceTree = "<group>"; };
		A5F9454A24B85A8000573A2F /* 309_最佳买卖股票时机含冷冻期.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "309_最佳买卖股票时机含冷冻期.cpp"; sourceTree = "<group>"; };
		A5F9454C24B866CD00573A2F /* 旋转数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "旋转数组.cpp"; sourceTree = "<group>"; };
		B70F3EC224C48B7800046C9D /* 337_打家劫舍III.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "337_打家劫舍III.cpp"; sourceTree = "<group>"; };
		B7181F4424BC917900C809F3 /* 剑指_Offer_15_二进制中1的个数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指_Offer_15_二进制中1的个数.cpp"; sourceTree = "<group>"; };
		B72175AB24B9D6C3001CDC1A /* 存在重复元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "存在重复元素.cpp"; sourceTree = "<group>"; };
		B72175AD24B9D864001CDC1A /* 只出现一次的数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "只出现一次的数字.cpp"; sourceTree = "<group>"; };
		B724C91C24C5DFC9002CBE12 /* 268_缺失数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "268_缺失数字.cpp"; sourceTree = "<group>"; };
		B754C8D124BF59B400A6F30B /* 剑指 Offer59II队列的最大值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer59II队列的最大值.cpp"; sourceTree = "<group>"; };
		B7551BB224C1ECBA00410B03 /* 1302_层数最深叶子节点的和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1302_层数最深叶子节点的和.cpp"; sourceTree = "<group>"; };
		B7551BB424C1FAA700410B03 /* 1464_数组中两元素的最大乘积.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1464_数组中两元素的最大乘积.cpp"; sourceTree = "<group>"; };
		B7551BB624C1FD4A00410B03 /* 1502_判断能否形成等差数列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1502_判断能否形成等差数列.cpp"; sourceTree = "<group>"; };
		B758C2B924BF6A4B0008A4C4 /* 剑指 Offer59I_滑动窗口的最大值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer59I_滑动窗口的最大值.cpp"; sourceTree = "<group>"; };
		B769302B24D6FC9900D1F965 /* 114_二叉树展开为链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "114_二叉树展开为链表.cpp"; sourceTree = "<group>"; };
		B798D14024BAFD960044C1CA /* 174_地下城游戏.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "174_地下城游戏.cpp"; sourceTree = "<group>"; };
		B798D14224BB09530044C1CA /* 5460_好数对的数目.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5460_好数对的数目.cpp"; sourceTree = "<group>"; };
		B798D14424BB11D20044C1CA /* 1470_重新排列数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1470_重新排列数组.cpp"; sourceTree = "<group>"; };
		B79DC35024C334C9008589E6 /* 429_N叉树的层序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "429_N叉树的层序遍历.cpp"; sourceTree = "<group>"; };
		B79DC35224C334E9008589E6 /* Node.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = Node.cpp; sourceTree = "<group>"; };
		B79DC35324C334E9008589E6 /* Node.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = Node.hpp; sourceTree = "<group>"; };
		B79DC35524C33853008589E6 /* 199_二叉树的右视图.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "199_二叉树的右视图.cpp"; sourceTree = "<group>"; };
		B79DC35724C33C90008589E6 /* 129_求根到叶子节点数字之和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "129_求根到叶子节点数字之和.cpp"; sourceTree = "<group>"; };
		B7B5338024B60471000FFA74 /* 面试题_02_07_链表相交.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "面试题_02_07_链表相交.cpp"; sourceTree = "<group>"; };
		B7B5338324B60D3F000FFA74 /* 1_两数之和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1_两数之和.cpp"; sourceTree = "<group>"; };
		B7D01F7D24B759A3006BCD88 /* 55_跳跃游戏.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "55_跳跃游戏.cpp"; sourceTree = "<group>"; };
		B7D01F7F24B7661B006BCD88 /* 1480_一维数组的动态和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1480_一维数组的动态和.cpp"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		A5A3B17B24B2D4010025BA95 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		A50FAE5724B564E300561A45 /* 递归 */ = {
			isa = PBXGroup;
			children = (
				A50FAE5824B564F800561A45 /* 面试题_16_11_跳水板.cpp */,
				A562A67424CFF6BB008CA743 /* 344_反转字符串.cpp */,
			);
			path = "递归";
			sourceTree = "<group>";
		};
		A518199624C0225300433CA9 /* 二分查找 */ = {
			isa = PBXGroup;
			children = (
				A518199724C0226B00433CA9 /* 33_搜索旋转排序数组.cpp */,
				A590DAED24C1585C00D8D39F /* 35_搜索插入位置.cpp */,
				A508620B24D3D779001C54AC /* 面试题08_03_魔术索引.cpp */,
			);
			path = "二分查找";
			sourceTree = "<group>";
		};
		A5286D4A24DD42FC00211888 /* 滑动窗口 */ = {
			isa = PBXGroup;
			children = (
				A5286D4824DD36AD00211888 /* 3_无重复字符的最长子串.cpp */,
			);
			path = "滑动窗口";
			sourceTree = "<group>";
		};
		A52C714824B4476500A0F3F3 /* 树 */ = {
			isa = PBXGroup;
			children = (
				A52C714A24B4476500A0F3F3 /* TreeNode.cpp */,
				A52C714B24B4476500A0F3F3 /* TreeNode.hpp */,
				B79DC35324C334E9008589E6 /* Node.hpp */,
				B79DC35224C334E9008589E6 /* Node.cpp */,
				A52C714924B4476500A0F3F3 /* 112_路径总和.cpp */,
				A5A9D30D24BF106400033039 /* 剑指Offer33_二叉搜索树的后序遍历序列.cpp */,
				B7551BB224C1ECBA00410B03 /* 1302_层数最深叶子节点的和.cpp */,
				B79DC35024C334C9008589E6 /* 429_N叉树的层序遍历.cpp */,
				B79DC35524C33853008589E6 /* 199_二叉树的右视图.cpp */,
				B79DC35724C33C90008589E6 /* 129_求根到叶子节点数字之和.cpp */,
				A5732B3D24C8078F00D91A04 /* 173_二叉搜索树迭代器.cpp */,
				A5F57D8024C98E690020C6BC /* 538_把二叉搜索树转换为累加树.cpp */,
				A5F57D8224C99DFC0020C6BC /* 1305_两棵二叉搜索树中的所有元素.cpp */,
				A50946A424CABC4C00B0EBB7 /* 437_路径总和III.cpp */,
				A50946A624CAC1E200B0EBB7 /* 1290_二进制链表转整数.cpp */,
				A5D2B5C924CC130C006694E0 /* 687_最长同值路径.cpp */,
				A5D2B5CA24CC130C006694E0 /* 687_最长同值路径.hpp */,
				A562A66924CFBFA8008CA743 /* 104_二叉树的最大深度.cpp */,
				A562A66E24CFC88A008CA743 /* 94_二叉树的中序遍历.cpp */,
				A539654624D299370047AC36 /* 98_验证二叉搜索树.cpp */,
				A539654824D29F460047AC36 /* 100_相同的树.cpp */,
				A539654A24D29FFC0047AC36 /* 101_对称二叉树.cpp */,
				A539654C24D2AAED0047AC36 /* 102_二叉树的层序遍历.cpp */,
				A539654E24D2AD6E0047AC36 /* 103_二叉树的锯齿形层次遍历.cpp */,
				A539655024D2AE6B0047AC36 /* 105_从前序与中序遍历序列构造二叉树.cpp */,
				A539655224D2B41B0047AC36 /* 106_从中序与后序遍历序列构造二叉树.cpp */,
				A539655424D2BB4D0047AC36 /* 107_二叉树的层次遍历II.cpp */,
				A5A260B024D416F0003C6BC8 /* 108_将有序数组转换为二叉搜索树.cpp */,
				A5A260B224D41A19003C6BC8 /* 110_平衡二叉树.cpp */,
				A5A260B424D41BA6003C6BC8 /* 111_二叉树的最小深度.cpp */,
				A5D035DE24D558E200734DEB /* 113_路径总和II.cpp */,
				B769302B24D6FC9900D1F965 /* 114_二叉树展开为链表.cpp */,
				A52A52CB24D7FE45000BEF47 /* 116_填充每个节点的下一个右侧节点指针.cpp */,
				A52A52CD24D80333000BEF47 /* 117_填充每个节点的下一个右侧节点指针II.cpp */,
				A5A5D25A24DA9F67008B1FCE /* 337_打家劫舍III.cpp */,
				A53CF93424E3BC40009B2E04 /* 1379_找出克隆二叉树中的相同节点.cpp */,
				A53CF93624E3C2CB009B2E04 /* 897_递增顺序查找树.cpp */,
			);
			path = "树";
			sourceTree = "<group>";
		};
		A52C714E24B4479C00A0F3F3 /* 数组 */ = {
			isa = PBXGroup;
			children = (
				A52C714F24B447B300A0F3F3 /* 面试题 10.01.cpp */,
				A50FAE5B24B5857E00561A45 /* 删除排序数组中的重复项.cpp */,
				B7D01F7F24B7661B006BCD88 /* 1480_一维数组的动态和.cpp */,
				B72175AB24B9D6C3001CDC1A /* 存在重复元素.cpp */,
				B72175AD24B9D864001CDC1A /* 只出现一次的数字.cpp */,
				A5F9454C24B866CD00573A2F /* 旋转数组.cpp */,
				A5BEA4BF24BC21A400563FF9 /* 350_两个数组的交集II.cpp */,
				B798D14224BB09530044C1CA /* 5460_好数对的数目.cpp */,
				A5BEA4C124BC21BB00563FF9 /* 349_两个数组的交集.cpp */,
				B798D14424BB11D20044C1CA /* 1470_重新排列数组.cpp */,
				A5A9D30A24BEE01700033039 /* 剑指Offer61_扑克牌中的顺子.cpp */,
				A519E7EE24C53918008CEE67 /* 167_两数之和_II _输入有序数组.cpp */,
				B7551BB424C1FAA700410B03 /* 1464_数组中两元素的最大乘积.cpp */,
				B7551BB624C1FD4A00410B03 /* 1502_判断能否形成等差数列.cpp */,
				B724C91C24C5DFC9002CBE12 /* 268_缺失数字.cpp */,
				A568F64824D151D700A0A547 /* 240_搜索二维矩阵II.cpp */,
				A568F64A24D152D700A0A547 /* 88_合并两个有序数组.cpp */,
				A56118AA24DE8C18008A742A /* 169_多数元素.cpp */,
				A56118B224E14D85008A742A /* 283_移动零.cpp */,
				A52A2F0D24E264A500BC90A0 /* 215_数组中的第K个最大元素.cpp */,
			);
			path = "数组";
			sourceTree = "<group>";
		};
		A557A07F24BD905800E5F736 /* BFS */ = {
			isa = PBXGroup;
			children = (
				A557A08024BD906800E5F736 /* 513_找树左下角的值.cpp */,
			);
			path = BFS;
			sourceTree = "<group>";
		};
		A56A353124C585C300CD7014 /* 栈 */ = {
			isa = PBXGroup;
			children = (
				A56A353224C585CF00CD7014 /* 1047_删除字符串中的所有相邻重复项.cpp */,
				A56A353424C58E9B00CD7014 /* 1019_链表中的下一个更大节点.cpp */,
				A52A157924C6D9E900434F59 /* 1021_删除最外层的括号.cpp */,
				A52A157B24C6E0F900434F59 /* 921_使括号有效的最少添加.cpp */,
				A5732B3F24C80CAA00D91A04 /* 901_股票价格跨度.cpp */,
				A593AD0024CEF74B005BAA65 /* 20_有效的括号.cpp */,
				A593AD0224CEFA01005BAA65 /* 739_每日温度.cpp */,
				A593AD0424CEFDDF005BAA65 /* 150_逆波兰表达式求值.cpp */,
				A562A66C24CFC623008CA743 /* 155_最小栈.cpp */,
				A562A67024CFCA99008CA743 /* 232_用栈实现队列.cpp */,
				A562A67224CFCDE0008CA743 /* 225_用队列实现栈.cpp */,
			);
			path = "栈";
			sourceTree = "<group>";
		};
		A5A3B17524B2D4010025BA95 = {
			isa = PBXGroup;
			children = (
				A5A3B18024B2D4010025BA95 /* leetcode_cpp */,
				A5A3B17F24B2D4010025BA95 /* Products */,
			);
			sourceTree = "<group>";
		};
		A5A3B17F24B2D4010025BA95 /* Products */ = {
			isa = PBXGroup;
			children = (
				A5A3B17E24B2D4010025BA95 /* leetcode_cpp */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		A5A3B18024B2D4010025BA95 /* leetcode_cpp */ = {
			isa = PBXGroup;
			children = (
				A5A3B18124B2D4010025BA95 /* main.cpp */,
				A5D2B5C624CBECFB006694E0 /* 字符串 */,
				A56A353124C585C300CD7014 /* 栈 */,
				A518199624C0225300433CA9 /* 二分查找 */,
				B754C8D024BF59A200A6F30B /* 队列 */,
				B7181F4324BC914400C809F3 /* 位运算 */,
				A5286D4A24DD42FC00211888 /* 滑动窗口 */,
				A5D3D8AD24B819FE003AF7C8 /* 动态规划 */,
				B7D01F7C24B7598B006BCD88 /* 贪心 */,
				B7B5338224B60D34000FFA74 /* HashMap */,
				A50FAE5724B564E300561A45 /* 递归 */,
				A557A07F24BD905800E5F736 /* BFS */,
				A5F0651724BC6E97007F0C5C /* DFS */,
				A52C714E24B4479C00A0F3F3 /* 数组 */,
				A52C714824B4476500A0F3F3 /* 树 */,
				A5A3B18824B2D4160025BA95 /* 链表 */,
			);
			path = leetcode_cpp;
			sourceTree = "<group>";
		};
		A5A3B18824B2D4160025BA95 /* 链表 */ = {
			isa = PBXGroup;
			children = (
				A5A3B18D24B2D4160025BA95 /* ListNode.hpp */,
				A5A3B18924B2D4160025BA95 /* ListNode.cpp */,
				A5A3B18B24B2D4160025BA95 /* 2_两数相加.cpp */,
				A5A3B18C24B2D4160025BA95 /* 21_合并两个有序链表.cpp */,
				A5A3B18A24B2D4160025BA95 /* 206_反转链表.cpp */,
				A550F67D24B465D900556ABA /* 19_删除链表的倒数第N个节点.cpp */,
				A54980E424B469910066F455 /* 24_两两交换链表中的节点.cpp */,
				A518199924C030D200433CA9 /* 83_删除排序链表中的重复元素.cpp */,
				A518199B24C0321D00433CA9 /* 82_删除排序链表中的重复元素II.cpp */,
				A54980E624B46D7D0066F455 /* 143_重排链表.cpp */,
				A503696C24B5DAC900FC1049 /* 面试题_02_08_环路检测.cpp */,
				A524EC6824B6B81A00765683 /* 面试题_02_04_分割链表.cpp */,
				A524EC6A24B6BB7C00765683 /* _328_奇偶链表.cpp */,
				B7B5338024B60471000FFA74 /* 面试题_02_07_链表相交.cpp */,
				A510DCB324D8FC5900CE32BA /* 23_合并K个排序链表.cpp */,
				A5286D3C24DBF13600211888 /* 61_旋转链表.cpp */,
				A5286D3E24DBF54F00211888 /* 86_分隔链表.cpp */,
				A5286D4124DBF7B700211888 /* 141_环形链表.cpp */,
				A5286D4324DBF8AC00211888 /* 142_环形链表II.cpp */,
			);
			path = "链表";
			sourceTree = "<group>";
		};
		A5D2B5C624CBECFB006694E0 /* 字符串 */ = {
			isa = PBXGroup;
			children = (
				A5D2B5C724CBED13006694E0 /* 38_外观数列.cpp */,
				A568F64C24D1570A00A0A547 /* 125_验证回文串.cpp */,
				A5E15D9A24D15CA40092EEFB /* 680_验证回文字符串Ⅱ.cpp */,
				A5D035E024D7AB5500734DEB /* 415_字符串相加.cpp */,
				A57C654B24E52A520070D250 /* 43_字符串相乘.cpp */,
			);
			path = "字符串";
			sourceTree = "<group>";
		};
		A5D3D8AD24B819FE003AF7C8 /* 动态规划 */ = {
			isa = PBXGroup;
			children = (
				A5D3D8AE24B81A15003AF7C8 /* 121_买卖股票的最佳时机.cpp */,
				A5F9454A24B85A8000573A2F /* 309_最佳买卖股票时机含冷冻期.cpp */,
				B798D14024BAFD960044C1CA /* 174_地下城游戏.cpp */,
				A557A07824BD522400E5F736 /* 120_三角形最小路径和.cpp */,
				A53F4A7724BEA9FF0053DB5A /* 96_不同的二叉搜索树.cpp */,
				B70F3EC224C48B7800046C9D /* 337_打家劫舍III.cpp */,
				A5E3679624C9289D001AD032 /* 64_最小路径和.cpp */,
				A5F0510724CA806E009E0391 /* 1025_除数博弈.cpp */,
				A522F83C24CE786400247299 /* 392_判断子序列.cpp */,
				A562A67624CFF975008CA743 /* 118_杨辉三角.cpp */,
				A562A67924CFFB2A008CA743 /* 119_杨辉三角II.cpp */,
				A5E15D9C24D1616A0092EEFB /* 139_单词拆分.cpp */,
				A56118B024E1440B008A742A /* 152_乘积最大子数组.cpp */,
			);
			path = "动态规划";
			sourceTree = "<group>";
		};
		A5F0651724BC6E97007F0C5C /* DFS */ = {
			isa = PBXGroup;
			children = (
				A5F0651524BC63AE007F0C5C /* 剑指Offer13_机器人的运动范围.cpp */,
				A557A07C24BD8B7D00E5F736 /* 872_叶子相似的树.cpp */,
				A557A08224BDB7EB00E5F736 /* 1123_最深叶节点的最近公共祖先.cpp */,
				A53F4A7924BEC9E70053DB5A /* 79_单词搜索.cpp */,
				A52A2F0B24E24CC200BC90A0 /* 130_被围绕的区域.cpp */,
				A53CF93224E39975009B2E04 /* 133_克隆图.cpp */,
			);
			path = DFS;
			sourceTree = "<group>";
		};
		B7181F4324BC914400C809F3 /* 位运算 */ = {
			isa = PBXGroup;
			children = (
				B7181F4424BC917900C809F3 /* 剑指_Offer_15_二进制中1的个数.cpp */,
				A5D2B5CC24CC13F1006694E0 /* 371_两整数之和.cpp */,
				A568F64624D14E8C00A0A547 /* 136_只出现一次的数字.cpp */,
			);
			path = "位运算";
			sourceTree = "<group>";
		};
		B754C8D024BF59A200A6F30B /* 队列 */ = {
			isa = PBXGroup;
			children = (
				B758C2B824BF6A2D0008A4C4 /* 单调队列 */,
			);
			path = "队列";
			sourceTree = "<group>";
		};
		B758C2B824BF6A2D0008A4C4 /* 单调队列 */ = {
			isa = PBXGroup;
			children = (
				B754C8D124BF59B400A6F30B /* 剑指 Offer59II队列的最大值.cpp */,
				B758C2B924BF6A4B0008A4C4 /* 剑指 Offer59I_滑动窗口的最大值.cpp */,
			);
			path = "单调队列";
			sourceTree = "<group>";
		};
		B7B5338224B60D34000FFA74 /* HashMap */ = {
			isa = PBXGroup;
			children = (
				B7B5338324B60D3F000FFA74 /* 1_两数之和.cpp */,
			);
			path = HashMap;
			sourceTree = "<group>";
		};
		B7D01F7C24B7598B006BCD88 /* 贪心 */ = {
			isa = PBXGroup;
			children = (
				B7D01F7D24B759A3006BCD88 /* 55_跳跃游戏.cpp */,
				A5D3D8B124B82EDF003AF7C8 /* 122_买卖股票的最佳时机II.cpp */,
				A545FD2E24C8547E009ADB2A /* 134_加油站.cpp */,
			);
			path = "贪心";
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		A5A3B17D24B2D4010025BA95 /* leetcode_cpp */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = A5A3B18524B2D4010025BA95 /* Build configuration list for PBXNativeTarget "leetcode_cpp" */;
			buildPhases = (
				A5A3B17A24B2D4010025BA95 /* Sources */,
				A5A3B17B24B2D4010025BA95 /* Frameworks */,
				A5A3B17C24B2D4010025BA95 /* CopyFiles */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = leetcode_cpp;
			productName = leetcode_cpp;
			productReference = A5A3B17E24B2D4010025BA95 /* leetcode_cpp */;
			productType = "com.apple.product-type.tool";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		A5A3B17624B2D4010025BA95 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 1130;
				ORGANIZATIONNAME = "飞熊";
				TargetAttributes = {
					A5A3B17D24B2D4010025BA95 = {
						CreatedOnToolsVersion = 11.3.1;
					};
				};
			};
			buildConfigurationList = A5A3B17924B2D4010025BA95 /* Build configuration list for PBXProject "leetcode_cpp" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = A5A3B17524B2D4010025BA95;
			productRefGroup = A5A3B17F24B2D4010025BA95 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				A5A3B17D24B2D4010025BA95 /* leetcode_cpp */,
			);
		};
/* End PBXProject section */

/* Begin PBXSourcesBuildPhase section */
		A5A3B17A24B2D4010025BA95 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				A56118B124E1440B008A742A /* 152_乘积最大子数组.cpp in Sources */,
				B7181F4524BC917900C809F3 /* 剑指_Offer_15_二进制中1的个数.cpp in Sources */,
				A539654D24D2AAED0047AC36 /* 102_二叉树的层序遍历.cpp in Sources */,
				A52A2F0C24E24CC200BC90A0 /* 130_被围绕的区域.cpp in Sources */,
				A568F64B24D152D700A0A547 /* 88_合并两个有序数组.cpp in Sources */,
				A568F64724D14E8C00A0A547 /* 136_只出现一次的数字.cpp in Sources */,
				A56A353624C58E9B00CD7014 /* 1019_链表中的下一个更大节点.cpp in Sources */,
				A590DAEE24C1585C00D8D39F /* 35_搜索插入位置.cpp in Sources */,
				A5286D3D24DBF13600211888 /* 61_旋转链表.cpp in Sources */,
				B798D14124BAFD960044C1CA /* 174_地下城游戏.cpp in Sources */,
				A5732B4024C80CAA00D91A04 /* 901_股票价格跨度.cpp in Sources */,
				A5A3B19124B2D4160025BA95 /* 21_合并两个有序链表.cpp in Sources */,
				A519E7EF24C53918008CEE67 /* 167_两数之和_II _输入有序数组.cpp in Sources */,
				A52A52CE24D80333000BEF47 /* 117_填充每个节点的下一个右侧节点指针II.cpp in Sources */,
				A5286D4224DBF7B700211888 /* 141_环形链表.cpp in Sources */,
				A562A66F24CFC88A008CA743 /* 94_二叉树的中序遍历.cpp in Sources */,
				B724C91D24C5DFC9002CBE12 /* 268_缺失数字.cpp in Sources */,
				A562A67B24CFFB2A008CA743 /* 119_杨辉三角II.cpp in Sources */,
				A5A3B19024B2D4160025BA95 /* 2_两数相加.cpp in Sources */,
				B7551BB824C1FD4A00410B03 /* 1502_判断能否形成等差数列.cpp in Sources */,
				B754C8D224BF59B400A6F30B /* 剑指 Offer59II队列的最大值.cpp in Sources */,
				A539655524D2BB4D0047AC36 /* 107_二叉树的层次遍历II.cpp in Sources */,
				A57C654C24E52A520070D250 /* 43_字符串相乘.cpp in Sources */,
				A53CF93724E3C2CB009B2E04 /* 897_递增顺序查找树.cpp in Sources */,
				A50946A524CABC4C00B0EBB7 /* 437_路径总和III.cpp in Sources */,
				A5E15D9B24D15CA40092EEFB /* 680_验证回文字符串Ⅱ.cpp in Sources */,
				A557A07924BD522400E5F736 /* 120_三角形最小路径和.cpp in Sources */,
				A5A260B524D41BA6003C6BC8 /* 111_二叉树的最小深度.cpp in Sources */,
				A539655324D2B41B0047AC36 /* 106_从中序与后序遍历序列构造二叉树.cpp in Sources */,
				B758C2BA24BF6A4B0008A4C4 /* 剑指 Offer59I_滑动窗口的最大值.cpp in Sources */,
				A5F0651624BC63AE007F0C5C /* 剑指Offer13_机器人的运动范围.cpp in Sources */,
				A539654724D299370047AC36 /* 98_验证二叉搜索树.cpp in Sources */,
				A53CF93324E39975009B2E04 /* 133_克隆图.cpp in Sources */,
				A50FAE5C24B5857E00561A45 /* 删除排序数组中的重复项.cpp in Sources */,
				A52A157C24C6E0F900434F59 /* 921_使括号有效的最少添加.cpp in Sources */,
				A5F57D8324C99DFC0020C6BC /* 1305_两棵二叉搜索树中的所有元素.cpp in Sources */,
				A593AD0124CEF74B005BAA65 /* 20_有效的括号.cpp in Sources */,
				A5286D4424DBF8AC00211888 /* 142_环形链表II.cpp in Sources */,
				A52C714C24B4476500A0F3F3 /* 112_路径总和.cpp in Sources */,
				A5A3B18224B2D4010025BA95 /* main.cpp in Sources */,
				A50946A724CAC1E200B0EBB7 /* 1290_二进制链表转整数.cpp in Sources */,
				A5732B3E24C8078F00D91A04 /* 173_二叉搜索树迭代器.cpp in Sources */,
				A539655124D2AE6B0047AC36 /* 105_从前序与中序遍历序列构造二叉树.cpp in Sources */,
				B79DC35124C334C9008589E6 /* 429_N叉树的层序遍历.cpp in Sources */,
				A5A3B18E24B2D4160025BA95 /* ListNode.cpp in Sources */,
				B7551BB524C1FAA700410B03 /* 1464_数组中两元素的最大乘积.cpp in Sources */,
				B7551BB324C1ECBA00410B03 /* 1302_层数最深叶子节点的和.cpp in Sources */,
				A5A260B324D41A19003C6BC8 /* 110_平衡二叉树.cpp in Sources */,
				A539654924D29F460047AC36 /* 100_相同的树.cpp in Sources */,
				B7B5338424B60D3F000FFA74 /* 1_两数之和.cpp in Sources */,
				B79DC35624C33853008589E6 /* 199_二叉树的右视图.cpp in Sources */,
				A5E15D9D24D1616A0092EEFB /* 139_单词拆分.cpp in Sources */,
				A53F4A7824BEA9FF0053DB5A /* 96_不同的二叉搜索树.cpp in Sources */,
				A5F0510824CA806E009E0391 /* 1025_除数博弈.cpp in Sources */,
				A5A5D25B24DA9F67008B1FCE /* 337_打家劫舍III.cpp in Sources */,
				A550F67E24B465D900556ABA /* 19_删除链表的倒数第N个节点.cpp in Sources */,
				A562A67824CFF975008CA743 /* 118_杨辉三角.cpp in Sources */,
				B72175AC24B9D6C3001CDC1A /* 存在重复元素.cpp in Sources */,
				A5A9D30E24BF106400033039 /* 剑指Offer33_二叉搜索树的后序遍历序列.cpp in Sources */,
				B798D14524BB11D20044C1CA /* 1470_重新排列数组.cpp in Sources */,
				A53F4A7A24BEC9E70053DB5A /* 79_单词搜索.cpp in Sources */,
				A5BEA4C024BC21A400563FF9 /* 350_两个数组的交集II.cpp in Sources */,
				A52A2F0E24E264A500BC90A0 /* 215_数组中的第K个最大元素.cpp in Sources */,
				A5A9D30C24BEE01700033039 /* 剑指Offer61_扑克牌中的顺子.cpp in Sources */,
				A5D2B5CB24CC130C006694E0 /* 687_最长同值路径.cpp in Sources */,
				A5286D4024DBF54F00211888 /* 86_分隔链表.cpp in Sources */,
				A52C715024B447B300A0F3F3 /* 面试题 10.01.cpp in Sources */,
				A5D3D8AF24B81A15003AF7C8 /* 121_买卖股票的最佳时机.cpp in Sources */,
				A52C714D24B4476500A0F3F3 /* TreeNode.cpp in Sources */,
				A593AD0524CEFDDF005BAA65 /* 150_逆波兰表达式求值.cpp in Sources */,
				A5E3679724C9289D001AD032 /* 64_最小路径和.cpp in Sources */,
				B7D01F7E24B759A3006BCD88 /* 55_跳跃游戏.cpp in Sources */,
				A5D035E124D7AB5500734DEB /* 415_字符串相加.cpp in Sources */,
				A52A52CC24D7FE45000BEF47 /* 116_填充每个节点的下一个右侧节点指针.cpp in Sources */,
				A562A66B24CFBFA8008CA743 /* 104_二叉树的最大深度.cpp in Sources */,
				A545FD3024C8547E009ADB2A /* 134_加油站.cpp in Sources */,
				A568F64924D151D700A0A547 /* 240_搜索二维矩阵II.cpp in Sources */,
				B798D14324BB09530044C1CA /* 5460_好数对的数目.cpp in Sources */,
				A524EC6924B6B81A00765683 /* 面试题_02_04_分割链表.cpp in Sources */,
				A5A3B18F24B2D4160025BA95 /* 206_反转链表.cpp in Sources */,
				A50FAE5A24B564F800561A45 /* 面试题_16_11_跳水板.cpp in Sources */,
				A524EC6B24B6BB7C00765683 /* _328_奇偶链表.cpp in Sources */,
				A568F64D24D1570A00A0A547 /* 125_验证回文串.cpp in Sources */,
				A508620D24D3D779001C54AC /* 面试题08_03_魔术索引.cpp in Sources */,
				A539654F24D2AD6E0047AC36 /* 103_二叉树的锯齿形层次遍历.cpp in Sources */,
				A5D035DF24D558E200734DEB /* 113_路径总和II.cpp in Sources */,
				B79DC35424C334E9008589E6 /* Node.cpp in Sources */,
				A557A07E24BD8B7D00E5F736 /* 872_叶子相似的树.cpp in Sources */,
				B72175AE24B9D864001CDC1A /* 只出现一次的数字.cpp in Sources */,
				A53CF93524E3BC40009B2E04 /* 1379_找出克隆二叉树中的相同节点.cpp in Sources */,
				A557A08124BD906800E5F736 /* 513_找树左下角的值.cpp in Sources */,
				A56A353324C585CF00CD7014 /* 1047_删除字符串中的所有相邻重复项.cpp in Sources */,
				A56118AB24DE8C18008A742A /* 169_多数元素.cpp in Sources */,
				A5F9454B24B85A8000573A2F /* 309_最佳买卖股票时机含冷冻期.cpp in Sources */,
				B7D01F8024B7661B006BCD88 /* 1480_一维数组的动态和.cpp in Sources */,
				A518199824C0226B00433CA9 /* 33_搜索旋转排序数组.cpp in Sources */,
				A562A66D24CFC623008CA743 /* 155_最小栈.cpp in Sources */,
				A557A08424BDB7EB00E5F736 /* 1123_最深叶节点的最近公共祖先.cpp in Sources */,
				A562A67524CFF6BB008CA743 /* 344_反转字符串.cpp in Sources */,
				A54980E724B46D7D0066F455 /* 143_重排链表.cpp in Sources */,
				A5F57D8124C98E690020C6BC /* 538_把二叉搜索树转换为累加树.cpp in Sources */,
				A510DCB424D8FC5900CE32BA /* 23_合并K个排序链表.cpp in Sources */,
				A593AD0324CEFA01005BAA65 /* 739_每日温度.cpp in Sources */,
				B79DC35824C33C90008589E6 /* 129_求根到叶子节点数字之和.cpp in Sources */,
				B769302C24D6FC9900D1F965 /* 114_二叉树展开为链表.cpp in Sources */,
				B70F3EC324C48B7800046C9D /* 337_打家劫舍III.cpp in Sources */,
				A5D2B5C824CBED13006694E0 /* 38_外观数列.cpp in Sources */,
				A518199A24C030D200433CA9 /* 83_删除排序链表中的重复元素.cpp in Sources */,
				A5286D4924DD36AD00211888 /* 3_无重复字符的最长子串.cpp in Sources */,
				A5A260B124D416F0003C6BC8 /* 108_将有序数组转换为二叉搜索树.cpp in Sources */,
				A562A67124CFCA99008CA743 /* 232_用栈实现队列.cpp in Sources */,
				A522F83E24CE786400247299 /* 392_判断子序列.cpp in Sources */,
				A5D3D8B224B82EDF003AF7C8 /* 122_买卖股票的最佳时机II.cpp in Sources */,
				A56118B324E14D85008A742A /* 283_移动零.cpp in Sources */,
				A5F9454D24B866CD00573A2F /* 旋转数组.cpp in Sources */,
				A503696D24B5DAC900FC1049 /* 面试题_02_08_环路检测.cpp in Sources */,
				A518199C24C0321D00433CA9 /* 82_删除排序链表中的重复元素II.cpp in Sources */,
				A5D2B5CD24CC13F1006694E0 /* 371_两整数之和.cpp in Sources */,
				A54980E524B469910066F455 /* 24_两两交换链表中的节点.cpp in Sources */,
				A5BEA4C224BC21BB00563FF9 /* 349_两个数组的交集.cpp in Sources */,
				B7B5338124B60471000FFA74 /* 面试题_02_07_链表相交.cpp in Sources */,
				A539654B24D29FFC0047AC36 /* 101_对称二叉树.cpp in Sources */,
				A52A157A24C6D9E900434F59 /* 1021_删除最外层的括号.cpp in Sources */,
				A562A67324CFCDE0008CA743 /* 225_用队列实现栈.cpp in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		A5A3B18324B2D4010025BA95 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
			};
			name = Debug;
		};
		A5A3B18424B2D4010025BA95 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = macosx;
			};
			name = Release;
		};
		A5A3B18624B2D4010025BA95 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Debug;
		};
		A5A3B18724B2D4010025BA95 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		A5A3B17924B2D4010025BA95 /* Build configuration list for PBXProject "leetcode_cpp" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				A5A3B18324B2D4010025BA95 /* Debug */,
				A5A3B18424B2D4010025BA95 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		A5A3B18524B2D4010025BA95 /* Build configuration list for PBXNativeTarget "leetcode_cpp" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				A5A3B18624B2D4010025BA95 /* Debug */,
				A5A3B18724B2D4010025BA95 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = A5A3B17624B2D4010025BA95 /* Project object */;
}
